{"version":3,"file":"commonHelpers.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport izitoast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst inputPicker = document.querySelector('#datetime-picker');\nconst buttonRef = document.querySelector('button');\nconst timerDay = document.querySelector('[data-days]');\nconst timerHours = document.querySelector('[data-hours]');\nconst timerMinutes = document.querySelector('[data-minutes]');\nconst timerSeconds = document.querySelector('[data-seconds]');\n\nlet userSelectedDate = '';\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n\n    if (selectedDate < new Date()) {\n      izitoast.error({\n        position: 'topRight',\n        message: 'Please choose a date in the future',\n      });\n\n      buttonRef.setAttribute('disablet', true);\n    } else {\n      buttonRef.removeAttribute('disablet');\n      userSelectedDate = selectedDate;\n    }\n  },\n};\n\nconst datePicker = flatpickr(inputPicker, options);\nbuttonRef.addEventListener('click', () => {\n  const selectedDateTime = userSelectedDate.getTime();\n\n  const timeInterval = setInterval(() => {\n    const currentDateTime = new Date().getTime();\n    let different = selectedDateTime - currentDateTime;\n\n    const result = convertMs(different);\n    if (different <= 1000) {\n      clearInterval(timeInterval);\n    } else {\n      timerDay.textContent = `${result.days}`;\n      timerHours.textContent = `${result.hours}`;\n      timerMinutes.textContent = `${result.minutes}`;\n      timerSeconds.textContent = `${result.seconds}`;\n    }\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = String(Math.floor(ms / day)).padStart(2, '0');\n  // Remaining hours\n  const hours = String(Math.floor((ms % day) / hour)).padStart(2, '0');\n  // Remaining minutes\n  const minutes = String(Math.floor(((ms % day) % hour) / minute)).padStart(\n    2,\n    '0'\n  );\n  // Remaining seconds\n  const seconds = String(\n    Math.floor((((ms % day) % hour) % minute) / second)\n  ).padStart(2, '0');\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["inputPicker","buttonRef","timerDay","timerHours","timerMinutes","timerSeconds","userSelectedDate","options","selectedDates","selectedDate","izitoast","flatpickr","selectedDateTime","timeInterval","currentDateTime","different","result","convertMs","ms","days","hours","minutes","seconds"],"mappings":"2GAKA,MAAMA,EAAc,SAAS,cAAc,kBAAkB,EACvDC,EAAY,SAAS,cAAc,QAAQ,EAC3CC,EAAW,SAAS,cAAc,aAAa,EAC/CC,EAAa,SAAS,cAAc,cAAc,EAClDC,EAAe,SAAS,cAAc,gBAAgB,EACtDC,EAAe,SAAS,cAAc,gBAAgB,EAE5D,IAAIC,EAAmB,GAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,GAE/BC,EAAe,IAAI,MACrBC,EAAS,MAAM,CACb,SAAU,WACV,QAAS,oCACjB,CAAO,EAEDT,EAAU,aAAa,WAAY,EAAI,IAEvCA,EAAU,gBAAgB,UAAU,EACpCK,EAAmBG,EAEtB,CACH,EAEmBE,EAAUX,EAAaO,CAAO,EACjDN,EAAU,iBAAiB,QAAS,IAAM,CACxC,MAAMW,EAAmBN,EAAiB,UAEpCO,EAAe,YAAY,IAAM,CACrC,MAAMC,EAAkB,IAAI,KAAM,EAAC,QAAO,EAC1C,IAAIC,EAAYH,EAAmBE,EAEnC,MAAME,EAASC,EAAUF,CAAS,EAC9BA,GAAa,IACf,cAAcF,CAAY,GAE1BX,EAAS,YAAc,GAAGc,EAAO,OACjCb,EAAW,YAAc,GAAGa,EAAO,QACnCZ,EAAa,YAAc,GAAGY,EAAO,UACrCX,EAAa,YAAc,GAAGW,EAAO,UAExC,EAAE,GAAI,CACT,CAAC,EAED,SAASC,EAAUC,EAAI,CAQrB,MAAMC,EAAO,OAAO,KAAK,MAAMD,EAAK,KAAG,CAAC,EAAE,SAAS,EAAG,GAAG,EAEnDE,EAAQ,OAAO,KAAK,MAAOF,EAAK,MAAO,IAAI,CAAC,EAAE,SAAS,EAAG,GAAG,EAE7DG,EAAU,OAAO,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,CAAC,EAAE,SAC/D,EACA,GACJ,EAEQI,EAAU,OACd,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,CACtD,EAAI,SAAS,EAAG,GAAG,EAEjB,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}